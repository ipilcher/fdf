// SPDX-License-Identifier: GPL-2.0-or-later

#ifndef FDF_FILTER_H
#define FDF_FILTER_H

#include <arpa/inet.h>
#include <stdint.h>
#include <stdlib.h>
#include <sys/socket.h>


/*
 *
 *	API version
 *
 *	The API version is a 64-bit value, generated by XOR'ing the upper and
 *	lower halves of the 128-bit MD5 hash of this file.  (See apiver.sh.)
 *	The same hash is used to generate the name of the constructor function
 *	that is created by the FDF_FILTER macro.
 *
 *	The FDF_FILTER_API_VER  and FDF_FILTER_CTOR definitions are ignored when
 *	the hash is calculated, but all other changes to this file, including
 *	changes to whitespace and comments will change the calculated hash.
 *
 */

#define FDF_FILTER_API_VER	((uint64_t)0xe2f9d84e2edea4cfULL)
#define FDF_FILTER_CTOR		ctor_e2f9d84e2edea4cf


/*
 *
 *	Buffer size required to hold formatted socket addresses
 *
 */

#define FDF_FILTER_SA4_LEN	(INET_ADDRSTRLEN + sizeof ":XXXXX" - 1)
#define FDF_FILTER_SA6_LEN	(INET6_ADDRSTRLEN + sizeof "[]:XXXXX" - 1)


/*
 *
 *	Match function return values
 *
 */

/* Forward the packet immediately; don't call any subsequent filters */
#define FDF_FILTER_PASS_NOW	5  /* binary: 101 */

/* Drop the packet immediately; don't call any subsequent filters */
#define FDF_FILTER_DROP_NOW	4  /* binary: 100 */

/*
 * Forward the packet, unless a subsequent filter returns
 * FDF_FILTER_DROP_FORCE or FDF_FILTER_DROP_NOW
 */
#define FDF_FILTER_PASS_FORCE	3  /* binary: 011 */

/*
 * Drop the packet, unless a subsequent filter returns
 * FDF_FILTER_PASS_FORCE or FDF_FILTER_PASS_NOW
 */
#define FDF_FILTER_DROP_FORCE	2  /* binary: 010 */

/*
 * Forward the packet, unless a subsequent filter returns
 * FDF_FILTER_DROP, FDF_FILTER_DROP_FORCE, or FDF_FILTER_DROP_NOW
 */
#define FDF_FILTER_PASS		1  /* binary: 001 */

/*
 * Drop the packet, unless a subsequent filter returns
 * FDF_FILTER_PASS, FDF_FILTER_PASS_FORCE, or FDF_FILTER_PASS_NOW
 */
#define FDF_FILTER_DROP		0  /* binary: 000 */


/*
 *
 *	Data types
 *
 */

union fdf_filter_data {
	void		*p;
	uintptr_t	u;
	intptr_t	i;
	_Bool		b;
};

typedef _Bool (*fdf_filter_init_fn)(uintptr_t handle,
				    int argc, const char *const argv[]);

typedef void (*fdf_filter_cleanup_fn)(uintptr_t handle);

typedef
uint8_t (*fdf_filter_match_fn)(uintptr_t handle,
			       const struct sockaddr_storage *restrict src,
			       const struct sockaddr_storage *restrict dest,
			       const void *restrict pkt, size_t pkt_size,
			       uintptr_t in_netif, uintptr_t *fwd_netif_out);

struct fdf_filter_info {
	uint64_t		api_ver;
	fdf_filter_init_fn	init_fn;
	fdf_filter_match_fn	match_fn;
	fdf_filter_cleanup_fn	cleanup_fn;
};

/*
 *
 *	Filter registration
 *
 */

__attribute__((nonnull))
void fdf_filter_register(const struct fdf_filter_info *info);

#define FDF_FILTER(i, m, c)						\
	__attribute__((constructor))					\
	static void FDF_FILTER_CTOR(void)				\
	{								\
		static const struct fdf_filter_info info = {		\
			.api_ver	= FDF_FILTER_API_VER,		\
			.init_fn	= i,				\
			.match_fn	= m,				\
			.cleanup_fn	= c				\
		};							\
									\
		fdf_filter_register(&info);				\
	}


/*
 *
 *	API functions called by filters
 *
 */

#define FDF_FILTER_PKT_AS(type, pkt)					\
	({								\
		_Static_assert(__alignof__(type) <= 4,			\
			       "alignment of " #type " too large");	\
		(const type *)pkt;					\
	})

__attribute__((format(printf, 3, 4), nonnull))
void fdf_filter_log(uintptr_t handle, int priority,
		    const char *restrict format, ...);

__attribute__((nonnull))
const char *fdf_filter_sock_addr(uintptr_t handle,
				 const struct sockaddr_storage *restrict addr,
				 char *restrict dst, size_t size);

const char *fdf_filter_netif_name(uintptr_t handle, uintptr_t netif);

void fdf_filter_set_data(uintptr_t handle, union fdf_filter_data data);

union fdf_filter_data fdf_filter_get_data(uintptr_t handle);

#endif	/* FDF_FILTER_H */
